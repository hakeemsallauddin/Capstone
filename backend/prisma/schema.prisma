// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role           String   @db.VarChar(20)
  name           String   @db.VarChar(255)
  phone_number   String?  @unique @db.VarChar(20)
  aadhaar_number String?  @unique @db.VarChar(20)
  email          String   @unique @db.VarChar(255)
  panchayat_id   String?  @db.Uuid
  government_id  String?  @unique @db.VarChar(100)
  password_hash  String   @db.VarChar(255)
  state          String?  @db.VarChar(100)
  district       String?  @db.VarChar(100)
  village_name   String?  @db.VarChar(100)
  pincode        String?  @db.VarChar(10)
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  projects Project[]

  @@map("users")
}

model JobCard {
  job_card_id             String   @id @default(uuid())
  aadhaar_number          String   @unique
  phone_number            String
  password_hash           String
  date_of_birth           DateTime
  age                     Int
  family_id               String
  head_of_household_name  String
  father_or_husband_name  String
  category                String
  epic_number             String?
  belongs_to_bpl          Boolean
  state                   String
  district                String
  village                 String
  panchayat               String
  block                   String
  pincode                 String
  full_address            String
  bank_name               String
  account_number          String
  ifsc_code               String
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  applicants Applicant[]

  @@map("job_cards")
}

model Applicant {
  applicant_id     String   @id @default(uuid())
  job_card_id      String
  full_name        String
  date_of_birth    DateTime
  age              Int
  gender           String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  job_card JobCard @relation(fields: [job_card_id], references: [job_card_id])

  @@map("applicants")
}

model Otp {
  id           Int      @id @default(autoincrement())
  email        String
  otp          String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  resendCount  Int      @default(0)
  lastResendAt DateTime?
  isVerified   Boolean  @default(false)

  @@map("otps")
}

model Project {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  location    String?
  worker_need Int
  start_date  DateTime
  end_date    DateTime
  status      String   @default("pending")
  created_by  String   @db.Uuid
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  creator User @relation(fields: [created_by], references: [user_id])

  @@map("projects")
}

model Product {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  imageUrl      String?
  category      String?
  stockQuantity Int       @default(0)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("products")
}